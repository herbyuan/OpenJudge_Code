/*
*程序名：最大长方形
*作者：何卓远
*编制时间：2018-11-01
*功能：有一个长为N，宽为M的长方形区域，它的初始状态每个点都是白色的 
现在我们对其做如下操作：首先对于其中的k行染为黑色，行数在1-M之间；然后将其中的p列也染为黑色，列数在1-N之间。 
我们需要求出在染色之后，所分割出的白色长方形面积最大的那个，输出其面积的值 
比如这种情况（0代表白色，1代表黑色）： 
0 0 0 1 0 0 
0 0 0 1 0 0 
1 1 1 1 1 1 
0 0 0 1 0 0 
左上角的白色长方形最大，是3*2的，所以应该输出的值为6
*/

#include <iostream>       //预处理指令

using namespace std;

int main()
{
	int N, M, k, p, i, s, j;
	int a[110] = { 0 }, b[110] = { 0 }, x[101] = { 0 }, y[101] = { 0 };
	cin >> N >> M;
	cin >> k;
	for (i = 0; i < k; i++)
		cin >> a[i];
	cin >> p;
	for (i = 0; i < p; i++)
		cin >> b[i];
	x[0] = a[0] - 1;
	y[0] = b[0] - 1;
	for (i = 1; i < k; i++)
	    x[i] = a[i] - a[i - 1] - 1;
	x[i] = M - a[i - 1];            //每黑行之间的空行
	for (i = 1; i < p; i++)
		y[i] = b[i] - b[i - 1] - 1;
	y[i] = N - b[i - 1];          //每黑列之间的空列
	int max = 0;
	for (i = 0; i <= k; i++)
	{
		for (j = 0; j <= p; j++)
		{
			s = x[i] * y[j];
			if (s > max) max = s;
		}      //取得最大面积
	}
	cout << max;   //输出


	return 0;
}
